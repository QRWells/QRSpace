@page "/register"
@inject IAuthService authService
@inject NavigationManager navi

<h1>Register</h1>
@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        @foreach (var error in Errors)
        {
            <p>@error</p>
        }
    </div>
}
<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>
        <EditForm Model="RegisterModel" OnValidSubmit="HandleRegistration">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">User Name</label>
                <InputText Id="username" class="form-control" @bind-Value="RegisterModel.Username" />
                <ValidationMessage For="@(() => RegisterModel.Username)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" class="form-control" @bind-Value="RegisterModel.Password" @onfocusout="CheckPassword" />
                <ValidationMessage For="@(() => RegisterModel.Password)" />
            </div>
            <div class="form-group">
                <label for="confirmpassword">Confirm Password</label>
                <InputText Id="confirmpassword" type="password" class="form-control" @bind-Value="RegisterModel.ConfirmPassword" />
                <ValidationMessage For="@(() => RegisterModel.ConfirmPassword)" />
            </div>
            <button type="submit" class="btn btn-primary" disabled="@(!ValidPassword)">Submit</button>
        </EditForm>
    </div>
</div>

@code {
    private RegisterDto RegisterModel = new RegisterDto();
    private bool ShowErrors;
    private List<string> Errors = new List<string>();
    private bool ValidPassword = false;

    private void CheckPassword()
    {
        foreach (var item in RegisterModel.Password)
        {
            if (char.IsUpper(item))
            {
                ValidPassword = true;
                break;
            }
        }
    }

    private async Task HandleRegistration()
    {
        ShowErrors = false;

        var result = await authService.RegisterAsync(RegisterModel);

        if (result.Success)
        {
            navi.NavigateTo("/login");
        }
        else
        {
            Errors = result.Errors.Where(e => !string.IsNullOrEmpty(e)).ToList();
            ShowErrors = true;
        }
    }
}